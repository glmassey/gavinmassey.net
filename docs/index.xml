<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>www.gavinmassey.net on gavinmassey.net</title>
    <link>https://gavinmassey.net/</link>
    <description>Recent content in www.gavinmassey.net on gavinmassey.net</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 01 Dec 2023 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://gavinmassey.net/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>RICHARD (GAVIN) MASSEY</title>
      <link>https://gavinmassey.net/resume/</link>
      <pubDate>Tue, 12 Dec 2023 00:00:00 +0000</pubDate>
      <guid>https://gavinmassey.net/resume/</guid>
      <description>TARGET ROLE: System Administrator&#xA;gavin@gavinmassey.net&#xA;linkedin.com/in/gavin-massey/&#xA;SUMMARY Dynamic Infrastructure Administrator with 12+ years of experience in enhancing IT infrastructure efficiency, security, and performance. Expert in complex integrations, project management, and data protection. Adept at troubleshooting, innovative solution implementation, and team leadership. Committed to high-quality infrastructure services and staying abreast of evolving technologies.&#xA;CORE COMPETENCIES IT Infrastructure Management | Cloud Computing | Virtualization | Information Systems Integration | Enterprise &amp;amp; IT Security | Network Security | Security Policies and Procedures | Workflow Management Systems | Active Directory | User Account Management | System Administration | Vendor Management | Web Server Management | Software Deployment | Enterprise Networking</description>
    </item>
    <item>
      <title>Active Directory Forest, Tree, and Site, Understanding the Differences</title>
      <link>https://gavinmassey.net/articles/ad-forests-trees-sites/</link>
      <pubDate>Fri, 01 Dec 2023 00:00:00 +0000</pubDate>
      <guid>https://gavinmassey.net/articles/ad-forests-trees-sites/</guid>
      <description>When navigating the complexities of Microsoft Active Directory (AD), it&amp;rsquo;s crucial to understand the fundamental building blocks of its architecture: forests, trees, and sites. These terms are often used interchangeably, but they refer to distinct elements within an AD environment.&#xA;Active Directory Forest An Active Directory Forest is the topmost level of the AD structure. Think of a forest as a security boundary within which users, computers, groups, and other objects are managed.</description>
    </item>
    <item>
      <title>Understanding VMware Virtual Network Types and IP Addressing</title>
      <link>https://gavinmassey.net/articles/about-vmware-workstation-virtual-networks/</link>
      <pubDate>Fri, 01 Dec 2023 00:00:00 +0000</pubDate>
      <guid>https://gavinmassey.net/articles/about-vmware-workstation-virtual-networks/</guid>
      <description>When working with VMware Workstation Pro, setting up your network correctly is crucial for ensuring that your virtual machines (VMs) communicate properly with the host machine and among themselves. VMware provides various types of virtual networks, each serving different needs. This article will cover the three main types: Bridged, NAT, and Host-Only networking.&#xA;Bridged Networking Overview Bridged networking connects a VM directly to the host machine&amp;rsquo;s network, using the host&amp;rsquo;s physical network adapter.</description>
    </item>
    <item>
      <title></title>
      <link>https://gavinmassey.net/drafts/powershell/articles/accessing-static-methods-and-members-with-powershell/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gavinmassey.net/drafts/powershell/articles/accessing-static-methods-and-members-with-powershell/</guid>
      <description>Understanding Static vs. Instance Methods and Members in PowerShell PowerShell, deeply integrated with the .NET framework, offers a rich set of functionalities through both static and instance members of classes. Understanding the difference between these two is crucial for effective scripting and system administration.&#xA;Static Methods and Members Definition Static methods and members belong to the class rather than any individual instance of the class. Accessible directly using the class name without creating an instance.</description>
    </item>
    <item>
      <title></title>
      <link>https://gavinmassey.net/drafts/powershell/articles/advanced-powershell-remoting/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gavinmassey.net/drafts/powershell/articles/advanced-powershell-remoting/</guid>
      <description>PowerShell Remoting Guide by Manny Sethi Exercise: Get Information From Remote PC Task 1: Retrieve a list of physical network adapters from two computers Ensure that you are signed into the VIC-PC1 virtual machine.&#xA;On VIC-PC1, find a command that can list network adapters:&#xA;help *adapter* Note the Get-NetAdapter command.&#xA;View the help for the Get-NetAdapter command:&#xA;help Get-NetAdapter Note the -Physical parameter.&#xA;Run the command on VIC-DC1 and VIC-Srv2 by means of remoting:</description>
    </item>
    <item>
      <title></title>
      <link>https://gavinmassey.net/drafts/powershell/articles/creating-custom-modules/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gavinmassey.net/drafts/powershell/articles/creating-custom-modules/</guid>
      <description>Creating Custom Modules in PowerShell PowerShell modules are self-contained packages that contain PowerShell commands, such as cmdlets, providers, functions, and aliases. They offer an organized and scalable way to distribute and reuse scripts, especially when you have a collection of related functions. In this article, we&amp;rsquo;ll walk through creating a custom module and then provide a sample module for demonstration.&#xA;1. Understanding Modules A module is essentially a set of related functions grouped into a .</description>
    </item>
    <item>
      <title></title>
      <link>https://gavinmassey.net/drafts/powershell/articles/introducing-wim-cim/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gavinmassey.net/drafts/powershell/articles/introducing-wim-cim/</guid>
      <description>Introducing WIM and CIM 1. Retrieve Basic Operating System Information This command fetches basic details about the operating system.&#xA;Get-CimInstance -ClassName CIM_OperatingSystem 2. List All Installed Services Retrieve a list of all services installed on the machine.&#xA;Get-CimInstance -ClassName Win32_Service 3. Get System BIOS Information Displays details about the system&amp;rsquo;s BIOS.&#xA;Get-CimInstance -ClassName Win32_BIOS 4. List All Running Processes Shows all currently running processes on the machine.&#xA;Get-CimInstance -ClassName Win32_Process 5.</description>
    </item>
    <item>
      <title></title>
      <link>https://gavinmassey.net/drafts/powershell/articles/managing-domain-controllers-with-powershell/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gavinmassey.net/drafts/powershell/articles/managing-domain-controllers-with-powershell/</guid>
      <description>Managing Domain Controllers Using PowerShell Important considerations Before making any changes to ADDS, make sure dependent network services such as DNS and DHCP will not be affected. Alway create a backup before making any changes. How do you verify which domain controller has the FSMO roles # Verifying FSMO Roles Assignment # Import Active Directory module # This module is necessary to run Active Directory-related cmdlets Import-Module ActiveDirectory # Retrieve domain information # This command gets information about the current domain $domain = Get-ADDomain # Retrieve forest information # This command gets information about the forest $forest = Get-ADForest # Display FSMO roles for the domain # PDCEmulator, RIDMaster, and InfrastructureMaster roles are domain-specific Write-Host &amp;#34;Domain FSMO Roles:&amp;#34; Write-Host &amp;#34;PDC Emulator: $($domain.</description>
    </item>
    <item>
      <title></title>
      <link>https://gavinmassey.net/drafts/powershell/articles/parameter-binding/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gavinmassey.net/drafts/powershell/articles/parameter-binding/</guid>
      <description>Demystifying PowerShell&amp;rsquo;s Parameter Binding: How Objects Match Up to Cmdlet Parameters PowerShell&amp;rsquo;s true power lies in its object-oriented nature and the ability to pipe objects from one cmdlet to another. Understanding how PowerShell matches piped object data to cmdlet parameters is crucial for writing efficient and effective scripts. This article delves into the algorithm behind this matching process and how you can anticipate it using the Get-Help documentation.&#xA;Understanding Parameter Binding in PowerShell When you pipe data from one cmdlet to another in PowerShell, the system uses a process called parameter binding to match the piped object data to the parameters of the receiving cmdlet.</description>
    </item>
    <item>
      <title></title>
      <link>https://gavinmassey.net/drafts/powershell/articles/powershell-scripting/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gavinmassey.net/drafts/powershell/articles/powershell-scripting/</guid>
      <description>PowerShell Scripting Mastering PowerShell Scripting: A Concise Guide&#xA;PowerShell, a combination of a command-line shell and scripting language, offers powerful tools to automate tasks across Windows, Linux, and macOS platforms. Let&amp;rsquo;s dive deep into the realm of PowerShell scripting, exploring advanced topics and techniques with extensive code samples.&#xA;1. Introduction to PowerShell Scripting Originally designed for Windows, PowerShell has extended its reach to other OS platforms, making it a must-know for IT professionals.</description>
    </item>
    <item>
      <title></title>
      <link>https://gavinmassey.net/drafts/powershell/articles/powershell-skill-list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gavinmassey.net/drafts/powershell/articles/powershell-skill-list/</guid>
      <description>Windows System Admin Skills File system operations get current location test if a path is valid add/edit path change to different directory create file/directory delete file/directory copy file move file display contents of file delete contents of file write contents to file append to content of file list contents of directory recursive search of fs to list files by size, or other property recursive search to find files matching a string recursive search of text file to find string matching a pattern recursive traversal of file system to list permissions recursive traversal of file system to edit permissions list/add/remove psdrives Modules search for modules add/remove modules create a new module add/remove snap-ins System network interface configuration list network adapters list ipv4, ipv6 addresses list dns server address list gateway address list routing table remove/change/add ip address remove/change/add dns server address remove/change/add gateway address ping/tracepath change to dhcp release/renew dhcp address change to static ip add ip route System management - networking enable remote desktop (server) disable remote desktop (server) enable ping show network connections show firewall information disable/enable firewall for troubleshooting reasons Local user and group management list local users list local groups create local user delete local user create local group add/remove user from local group System management - processes and services list processes start process end process list services start/stop/restart service configure service startup type service get information on processes get information on service System management - basics get hostname get current username rename system stop/reboot computer add to domain remove from domain reset domain connection test domain connection get name of domain get list of windows roles add/remove windows role or feature install/remove windows update configure windows update automatic Windows domain controller management promote computer to domain controller demote computer from domain controller list domain controllers list fsmo roles transfer fsmo roles test health of domain test trust relationship between domain computers seize fsmo roles from failed domain controller get domain information get forest information get trust relationship information Windows AD group and user management change user password require password change disable password change requirement add user create user from template list user properties change user properties delete user account add/delete computer account add security or distribution group list security or distribution groups delete security or distribution group add/remove user from security or distribution group list members of security groups list/create/edit/delete ou DNS list/create/edit/delete dns a or aaaa record list/create/edit/delete dns alias record list/create/edit/delete dns mx record list/create/edit/delete dns txt record list/create/edit/delete spf record configure conditional forwarders list cached dns entries clear dns cache DHCP authorize/de-authorize server list/create/edit/delete scopes list/create/edit leases list/create/edit reservations list/create/edit exclusion zone list/create/edit dhcp scope options Other stuff boot to admin powershell instead of sconfig set execution policy and enable psremoting system profile sourcing local system profile for pssession how do use powershell to download external file, or website Manipulating data using Where-Object using Select-Object writing/reading csv format data writing/reading xml files data iterating/looping through list assigning values to variables creating arrays and dictionaries System time get/change time zone update ntp servers Remote management start/end pssession list/delete pssessions invoke command remotely save pssessions to variable and iterate through list executing commands or collecting information exporting a pssession CIM, WMI objects get/set/edit cim objects (wmi is depreciated) DSC, desired state configuration tbd Group policy objects creating new gpos listing gpos editing gpos gpupdate /force and gpresults getting help searching for help (get-help) searching for a command understanding cmdlet options Fix tab-complete Set-PSReadlineKeyHandler -Key Tab -Function MenuComplete Set-PSReadlineKeyHandler -Key UpArrow -Function HistorySearchBackward Set-PSReadlineKeyHandler -Key DownArrow -Function HistorySearchForward Troubleshooting scripts Maybe some scripts to check for common misconfigurations Maybe a script to view event viewer logs &amp;hellip; Some diagnostic tools Network shares list/add/edit/delete network share list/add/edit/delete network share permissions </description>
    </item>
    <item>
      <title></title>
      <link>https://gavinmassey.net/drafts/powershell/articles/sample-powershell-scripts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gavinmassey.net/drafts/powershell/articles/sample-powershell-scripts/</guid>
      <description>Sample PowerShell Scripts 1. User Information Collection Script&#xA;# User Information Collection Script # This script prompts the user for information and then displays it. # Prompt user for information $name = Read-Host -Prompt &amp;#34;Enter your name&amp;#34; $age = Read-Host -Prompt &amp;#34;Enter your age&amp;#34; $city = Read-Host -Prompt &amp;#34;Enter your city&amp;#34; # Display collected information Write-Output &amp;#34;You entered the following details:&amp;#34; Write-Output &amp;#34;Name: $name&amp;#34; Write-Output &amp;#34;Age: $age&amp;#34; Write-Output &amp;#34;City: $city&amp;#34; 2.</description>
    </item>
    <item>
      <title></title>
      <link>https://gavinmassey.net/drafts/powershell/articles/setting-up-remote-powershell/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gavinmassey.net/drafts/powershell/articles/setting-up-remote-powershell/</guid>
      <description>Setting up PowerShell Remoting 1. On the Remote Host Enable PowerShell Remoting: You can enable PowerShell Remoting on the remote host by running the following command in an elevated PowerShell session (Run as Administrator):&#xA;Enable-PSRemoting -Force Allow Incoming Connections: Ensure that the Windows Firewall (or any other firewall software you may be using) allows incoming connections for PowerShell Remoting. If using the Windows Firewall, this command will help:&#xA;Set-NetFirewallRule -Name WINRM-HTTP-In-TCP -RemoteAddress Any 2.</description>
    </item>
    <item>
      <title></title>
      <link>https://gavinmassey.net/drafts/powershell/articles/understanding-param/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gavinmassey.net/drafts/powershell/articles/understanding-param/</guid>
      <description>Understanding the param Keyword in PowerShell In PowerShell, the param keyword is used to define parameters that a script or function can accept. Parameters allow you to pass values into scripts and functions, making them more flexible and reusable. By providing different arguments, users can tailor the behavior of a script or function without modifying its actual code.&#xA;Features of the param Block:&#xA;Positional Parameters: By default, parameters are positional, and values are assigned based on the order they appear in the param block.</description>
    </item>
    <item>
      <title></title>
      <link>https://gavinmassey.net/drafts/powershell/articles/windows-powershell-quickstart-guide/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gavinmassey.net/drafts/powershell/articles/windows-powershell-quickstart-guide/</guid>
      <description>PowerShell Quickstart Guide PowerShell Quickstart Guide 1. Introduction PowerShell is Microsoft&amp;rsquo;s task automation framework, combining command-line speed, the flexibility of scripting, and the power of a GUI-based admin tool. Whether you&amp;rsquo;re automating tasks, extracting and processing data, or managing systems, PowerShell is a versatile tool to know.&#xA;2. Launching PowerShell You can find PowerShell by searching for it in the Windows start menu. For administrative tasks, it&amp;rsquo;s advisable to run PowerShell as an administrator (right-click the application and select &amp;ldquo;Run as administrator&amp;rdquo;).</description>
    </item>
    <item>
      <title></title>
      <link>https://gavinmassey.net/drafts/powershell/example-scripts/setting-up-server-core-dc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gavinmassey.net/drafts/powershell/example-scripts/setting-up-server-core-dc/</guid>
      <description>Configure Windows Server Core Domain Controller # Install vmware tools if not installed setup64.exe /s /v&amp;#34;/qn REBOOT=R&amp;#34; # Change the hostname and reboot Rename-Computer -NewName &amp;#39;NewComputerName&amp;#39; Restart-Computer # Remove the old ip address Remove-NetIPAddress -InterfaceAlias &amp;#39;Ethernet0&amp;#39; # Also you might have to remove the default gateway Remove-NetRoute -InterfaceAlias &amp;#39;Ethernet0&amp;#39; -NextHop 10.0.0.2 # Now you can add the new IP Address New-NetIPAddress ` -InterfaceAlias &amp;#39;Ethernet0&amp;#39; ` -IPAddress &amp;#39;10.0.77.104&amp;#39; ` -PrefixLength 24 ` -DefaultGateway &amp;#39;10.</description>
    </item>
    <item>
      <title></title>
      <link>https://gavinmassey.net/drafts/powershell/exercises/cim-lab-exercises/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gavinmassey.net/drafts/powershell/exercises/cim-lab-exercises/</guid>
      <description>WIM and CIM Lab Exercises Lab Exercise 1: System Overview Objective: Get an overview of your computer system&amp;rsquo;s properties.&#xA;Task: Retrieve information about the operating system, including its version, last boot up time, and the number of users currently logged on.&#xA;Command Hint: Get-CimInstance -ClassName CIM_OperatingSystem Task: Fetch the computer&amp;rsquo;s name, manufacturer, model, and the total physical memory.&#xA;Command Hint: Get-CimInstance -ClassName Win32_ComputerSystem Lab Exercise 2: Disk Analysis Objective: Analyze the disk space usage and health.</description>
    </item>
    <item>
      <title>Introduction to Trusts in Active Directory</title>
      <link>https://gavinmassey.net/articles/ad-infrastructure-management/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gavinmassey.net/articles/ad-infrastructure-management/</guid>
      <description>In the realm of network security and management, Trusts within Active Directory (AD) are pivotal. They are the backbone of domain interactions, enabling users in one domain to access resources in another. This guide delves into the intricacies of these trusts, outlining their types, implementations, and best practices for secure and efficient network management.&#xA;Types of Trusts in Active Directory Active Directory trusts can be broadly categorized into several types, each serving a unique purpose in the network infrastructure:</description>
    </item>
  </channel>
</rss>
